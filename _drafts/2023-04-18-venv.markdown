---
layout: single
toc: false
title:  "Venv"
date:   2023-04-18 05:00:10 +0200
categories: Python
---

# Motivation
Im Build-Prozess eines C++ Projekts kann es sinnvoll 
sein, Python-Skripte zu verwenden, beispielsweise 
für Code-Generatoren oder Paketierung. Um sicherzustellen, 
dass diese Skripte immer mit den gleichen Abhängigkeiten,
auf welchem Rechner sie ausgeführt werden,
arbeiten, ist die Verwendung einer virtuellen 
python Umgebung eine gute Lösung.

# Kurze Einführung in venv
`venv` ist ein Python-Paket, das die Erstellung von virtuellen Umgebungen ermöglicht. 
Es hilft dabei, die Projektabhängigkeiten getrennt von den globalen 
Python-Installationen zu halten. Das dabei generierte 
Verzeichnis enthält eine Kopie des Python-Interpreters, 
den Python Package Installer (kurz: pip) und die Python Standarbiblitohek. 
Da `venv` sicherstellt, dass die Abhängigkeiten eines 
Projekts isoliert und reproduzierbar sind, wird empfohlen 
es in den meisten Fällen, auch außerhalb von Build Umgebungen, zu verwenden.

{: .notice--info} 
**Hinweis** Ein wichtiger Aspekt für mich bei `venv` 
ist, dass es seit Python 3.3 als Teil der 
Python-Standardbibliothek enthalten ist. Dies 
bedeutet, dass keine zusätzlichen Pakete oder Tools 
installiert werden müssen, um `venv` zu verwenden. Falls 
dies für euch kein Problem darstellt, gibt es 
Python-Bibliotheken auf PyPi, die noch komfortabler 
und einfacher virtuelle Umgebungen erstellen können. 
Insbesondere ist hier [virtualenv](https://virtualenv.pypa.io/) 
zu erwähnen, aus dem einst `venv` hervorgegangen ist.

# Aufsetzen eines virtuellen Umgebung 

Um eine virtuelle Umgebung mit `venv` zu erstellen, führe den folgenden Befehl aus:

~~~
python3 -m venv mein_venv
~~~

Der angegebene Befehl erzeugt im aktuellen Arbeitsverzeichnis ein neues Verzeichnis mit dem Namen `mein_venv`. In dieses Verzeichnisses 
wird die virtuelle Umgebung angelegt. Das heißt unter anderem, dass der Python-Interpreter sowie die Standardbibliothek dorthin kopiert wird. 

Anschliessen kann sie durch folgenden Befehle aktiviert werden:

~~~
Windows: mein_venv\Scripts\activate
Linux/macOS: source mein_venv/bin/activate
~~~

Ab diesem Zeitpunkt ist die virtuelle Umgebung aktiv. Das am einfachsten daran zu erkennen das der 
Kommandozeile ein `mein_venv`vorangestellt wird. Alle Aufrufe des python Interperter beziehen sich 
nun auf die virtuelle Umgebung. 

{: .notice--warning} 
**Achtung**: Der Befehl ändert den Pfad. Verwendet ihr absolute 
Pfade zum installierten Python Interperter so wird __nicht__ die 
virtuelle Umgebung verwendet. Das kann insbesondere in Makefiles 
leicht passiern. 

Um die Umgebung zu deaktivieren, gib einfach `deactivate` ein.

# Arbeiten mit einer aktivierten virtuellen Umgebung

Nachdem du deine virtuelle Umgebung erstellt und aktiviert hast, 
kannst  du `pip` verwenden um benötigte Pakete zu installieren. 
Am besten tust du dies indem du eine requirements.txt 
erstellst und sie wie folgt mit `pip` verwendest.

~~~
pip install -r requirements.txt
~~~

Dadurch werden alle in der `requirements.txt` Datei 
angegebenen Pakete und ihre angegebenen Versionen in 
die aktive virtuelle Umgebung installiert. 
Das Format dieser Datei ist [hier](https://pip.pypa.io/en/stable/reference/requirements-file-format/) beschrieben.

{: .notice--info} 

**Tipp:** Wird in der `requirements.txt`lokalen Paketen die `-e` Option vorangstellt (steht für "editable"), erkennt das 
System Änderungen direkt am ursprünglichen Speicherort des Pakets. Diese Option ist besonders nützlich, wenn 
lokale Pakete installiert werden sollen, die sich innerhalb der Build-Umgebung befinden. Dadurch können 
Anpassungen und Updates im Paket leichter verfolgt und übernommen werden, ohne das Paket jedes Mal 
erneut installieren zu müssen.

# Verwendung von `venv`in einer Build Umgebung

Alles zuvor beschriebene zusammengenommen reicht aus um `venv`in einer Build-Umgebung 
zu verwenden. Wird beispielsweise ein gutes altes `Makefile`verwendet kann man 
bevor der python Interperter aufgerufen wird erst einmal eine virtuelle Umgebung aufsetzen. 

Da dies aber aber einige Sekunden benötigt die bei inkrementellen builds durchaus (vor allem mich :smiley: ) sehr stören können möchte ich 
euch noch Skript mitgeben. Es führt die zuvor genannten Schritte aus und unterstützt darüberhinaus noch folgende Funktionen.
- Es baut die virtuelle Umgebung nur auf wenn es nicht bereits existiert.
- Es installiert Pakete nur wenn die `requirements.txt`sich nicht geändert hat.
- Es baut die virtuelle Umgebung neu auf wenn das Skript selbst sich geändert hat.
- und letzendlich aktiviert sie die virtuelle Umgebung gleich.

Diese Funktionen werden durch Timestamp Files realisiert die …

{% gist 957789baeea26a8b541532b7ada36b2e %}

{: .notice--info} 
Man kann das was das Skript erzielt beispielsweise durch `make`rules erreichen. Ich finde den Ansatz
über ein Skript aber etwas angenehmer da er von den meisten Entwicklern intuitiv besser verstanden wird.


# Zusammenfassung
In diesem Artikel habe ich gezeigt, warum die 
Verwendung von `venv` im Build-Prozess eines 
C++ Projekts sinnvoll ist. 
Wir haben gesehen, wie man ein virtuelles 
Environment erstellt, aktiviert und deaktiviert. 
Zudem haben wir besprochen, wie man eine 
requirements.txt Datei erstellt. Letztlich wird dem Leser
ein gist an die Hand gegeben um die Schritte zu automatisieren.

